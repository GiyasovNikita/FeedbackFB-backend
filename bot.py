import asyncio
import logging
import requests
from functools import wraps
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BufferedInputFile
from io import BytesIO
import qrcode
from dotenv import load_dotenv
import os

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE = os.getenv("API_BASE")
FORM_URL = os.getenv("FORM_URL")

if not BOT_TOKEN or not API_BASE:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ API_BASE")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class CreateState(StatesGroup):
    choosing_action = State()
    adding_address = State()
    choosing_address = State()
    entering_room_name = State()
    entering_group_id = State()

class RoomQueryState(StatesGroup):
    choosing_location = State()


async def is_admin(user_id: int) -> bool:
    try:
        r = requests.get(f"{API_BASE}/admin/is_authorized/{user_id}")
        r.raise_for_status()
        data = r.json()
        return data.get("authorized", False)
    except requests.exceptions.RequestException:
        return None


def admin_required(handler):
    @wraps(handler)
    async def wrapper(message: Message, *args, **kwargs):
        is_user_admin = await is_admin(message.from_user.id)
        if is_user_admin is None:
            await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        if not is_user_admin:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        return await handler(message, *args, **kwargs)

    return wrapper

def make_qr_bytes(link: str) -> BytesIO:
    qr = qrcode.make(link)
    buf = BytesIO()
    qr.save(buf, format="PNG")
    buf.seek(0)
    return buf

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create ‚Äî —Å–æ–∑–¥–∞—Ç—å –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ\n"
        "/rooms ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å–∞–º\n"
        "/qr <token> ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –ø–æ —Ç–æ–∫–µ–Ω—É\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî –ø–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        "/getgroupid ‚Äî —É–∑–Ω–∞—Ç—å Telegram group id\n"
    )

@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

@dp.message(Command("create"))
@admin_required
async def cmd_create(message: Message, state: FSMContext):
    buttons = [[KeyboardButton(text="–ê–¥—Ä–µ—Å")], [KeyboardButton(text="–ü–æ–º–µ—â–µ–Ω–∏–µ")]]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=markup)
    await state.set_state(CreateState.choosing_action)

@dp.message(CreateState.choosing_action)
@admin_required
async def choose_action(message: Message, state: FSMContext):
    text = message.text.lower()
    if text == "–∞–¥—Ä–µ—Å":
        await state.set_state(CreateState.adding_address)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:", reply_markup=ReplyKeyboardRemove())
    elif text == "–ø–æ–º–µ—â–µ–Ω–∏–µ":
        try:
            r = requests.get(f"{API_BASE}/admin/locations")
            locations = r.json()
            if not locations:
                return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å.", reply_markup=ReplyKeyboardRemove())
            buttons = [[KeyboardButton(text=addr)] for addr in locations]
            markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
            await state.set_state(CreateState.choosing_address)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=markup)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ê–¥—Ä–µ—Å –∏–ª–∏ –ü–æ–º–µ—â–µ–Ω–∏–µ")

@dp.message(CreateState.adding_address)
@admin_required
async def add_address(message: Message, state: FSMContext):
    address = message.text
    try:
        r = requests.post(f"{API_BASE}/admin/add_location", data={"address": address})
        if r.status_code == 200:
            await message.answer("‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@dp.message(CreateState.choosing_address)
@admin_required
async def choose_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(CreateState.entering_room_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())

@dp.message(CreateState.entering_room_name)
@admin_required
async def enter_room_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CreateState.entering_group_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram Group ID:")

@dp.message(CreateState.entering_group_id)
@admin_required
async def enter_group_id(message: Message, state: FSMContext):
    group_id_input = message.text.strip()

    if group_id_input.startswith('-'):
        group_id = group_id_input
    else:
        group_id = f'-{group_id_input}'

    if not group_id.lstrip('-').isdigit():
        await message.answer("ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –º–∏–Ω—É—Å–∞)!")
        return

    await state.update_data(tg_group_id=group_id)
    data = await state.get_data()
    try:
        r = requests.post(f"{API_BASE}/admin/create_room", data={
            "address": data["address"],
            "name": data["name"],
            "tg_group_id": int(group_id)
        })
        result = r.json()
        link = result['qr_link']
        qr_buf = make_qr_bytes(link)
        photo = BufferedInputFile(qr_buf.getvalue(), filename="qr.png")
        caption = (
            f"‚úÖ –ü–æ–º–µ—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"üîó <a href=\"{link}\">–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É</a>"
        )
        await message.answer_photo(
            photo=photo,
            caption=caption,
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

@dp.message(Command("rooms"))
@admin_required
async def cmd_rooms(message: Message, state: FSMContext):
    try:
        r = requests.get(f"{API_BASE}/admin/locations")
        addresses = r.json()
        if not addresses:
            return await message.answer("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
        buttons = [[KeyboardButton(text=addr)] for addr in addresses]
        markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await state.set_state(RoomQueryState.choosing_location)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=markup)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(RoomQueryState.choosing_location)
@admin_required
async def show_rooms(message: Message, state: FSMContext):
    address = message.text
    try:
        r = requests.get(f"{API_BASE}/admin/rooms/by_location", params={"address": address})
        rooms = r.json()
        if not rooms:
            await message.answer("–ü–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç.", reply_markup=ReplyKeyboardRemove())
        else:
            text = f"üè¢ {address}\n"
            for room in rooms:
                text += f"‚Ä¢ {room['name']} ‚Äî token: `{room['qr_token']}`\n"
            await message.answer(text, parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@dp.message(Command("qr"))
@admin_required
async def cmd_qr(message: Message):
    args = message.text.split()
    if len(args) != 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /qr <token>")
    token = args[1]

    try:
        r = requests.get(f"{API_BASE}/room/{token}")
        if r.status_code == 404:
            return await message.answer("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        room = r.json()
        link = f"{FORM_URL}/feedback/{token}"

        qr_buf = make_qr_bytes(link)
        photo = BufferedInputFile(qr_buf.getvalue(), filename="qr.png")

        caption = (
            f"üìå <b>{room['name']}</b>\n"
            f"üìç {room['address']}\n"
            f"üîó <a href=\"{link}\">–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É</a>"
        )

        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=caption,
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("getgroupid"))
async def cmd_getgroupid(message: Message):
    if message.chat.type in ("group", "supergroup"):
        await message.answer(
            f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: <code>{message.chat.id}</code>\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "‚ö†Ô∏è –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø id –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∏–Ω—É—Å–∞.",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ—ë id."
        )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "<b>–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b> ü§ñ\n\n"
        "<b>1. –î–ª—è —á–µ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç?</b>\n"
        "–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–º–µ—â–µ–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –∞ —Ç–∞–∫–∂–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Telegram.\n\n"
        "<b>2. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n"
        "‚Ä¢ /help ‚Äî –ø–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        "‚Ä¢ /create ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
        "‚Ä¢ /rooms ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É (–∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /qr &lt;token&gt; ‚Äî –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ —Ç–æ–∫–µ–Ω—É –∫–æ–º–Ω–∞—Ç—ã (–∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /getgroupid ‚Äî —É–∑–Ω–∞—Ç—å Telegram group id\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n\n"
        "<b>3. –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å?</b>\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ê–¥—Ä–µ—Å¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º.\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤—Å—ë —É—Å–ø–µ—à–Ω–æ ‚Äî –∞–¥—Ä–µ—Å –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏—è.\n\n"
        "<b>4. –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ?</b>\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ü–æ–º–µ—â–µ–Ω–∏–µ¬ª\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ Telegram group id (—Å –º–∏–Ω—É—Å–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä -123456789; –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –º–∏–Ω—É—Å, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏)\n"
        "‚Ä¢ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n\n"
        "<b>5. –ö–∞–∫ —É–∑–Ω–∞—Ç—å Telegram group id?</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É Telegram\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getgroupid –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ ‚Äî –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º id. –õ–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –±–æ—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä @userinfobot.\n\n"
        "<b>6. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ?</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /qr &lt;token&gt;, –≥–¥–µ &lt;token&gt; ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã /rooms.\n"
        "‚Ä¢ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º QR-–∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É.\n\n"
        "<b>7. –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É?</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rooms\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "‚Ä¢ –ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Ç–æ–∫–µ–Ω–∞–º–∏.\n\n"
        "<b>8. –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ?</b>\n"
        "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ /cancel ‚Äî —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—Å–∏—Ç—Å—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–¥—ë—Ç.\n\n"
        "<b>9. –ü—Ä–æ—á–µ–µ</b>\n"
        "‚Ä¢ –ï—Å–ª–∏ –±–æ—Ç –ø–∏—à–µ—Ç ¬´–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞¬ª, –∑–Ω–∞—á–∏—Ç –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "‚Ä¢ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /cancel, /start, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n"
        "\n<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!</b>"
        , parse_mode="HTML"
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
