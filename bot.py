import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BufferedInputFile
from io import BytesIO
import qrcode
from dotenv import load_dotenv
import os

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE = os.getenv("API_BASE")
FORM_URL = os.getenv("FORM_URL")

if not BOT_TOKEN or not API_BASE:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ API_BASE")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class CreateState(StatesGroup):
    choosing_action = State()
    adding_address = State()
    choosing_address = State()
    entering_room_name = State()
    entering_group_id = State()

class RoomQueryState(StatesGroup):
    choosing_location = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(user_id: int) -> bool:
    try:
        r = requests.get(f"{API_BASE}/admin/is_authorized/{user_id}")
        return r.json().get("authorized", False)
    except Exception:
        return False

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create ‚Äî —Å–æ–∑–¥–∞—Ç—å –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ\n"
        "/rooms ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å–∞–º\n"
        "/qr <token> ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –ø–æ —Ç–æ–∫–µ–Ω—É\n\n"
    )


@dp.message(Command("create"))
async def cmd_create(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    buttons = [[KeyboardButton(text="–ê–¥—Ä–µ—Å")], [KeyboardButton(text="–ö–æ–º–Ω–∞—Ç–∞")]]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=markup)
    await state.set_state(CreateState.choosing_action)

@dp.message(CreateState.choosing_action)
async def choose_action(message: Message, state: FSMContext):
    text = message.text.lower()
    if text == "–∞–¥—Ä–µ—Å":
        await state.set_state(CreateState.adding_address)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:", reply_markup=ReplyKeyboardRemove())
    elif text == "–∫–æ–º–Ω–∞—Ç–∞":
        try:
            r = requests.get(f"{API_BASE}/admin/locations")
            locations = r.json()
            if not locations:
                return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å.", reply_markup=ReplyKeyboardRemove())
            buttons = [[KeyboardButton(text=addr)] for addr in locations]
            markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
            await state.set_state(CreateState.choosing_address)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=markup)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ê–¥—Ä–µ—Å –∏–ª–∏ –ö–æ–º–Ω–∞—Ç–∞")

@dp.message(CreateState.adding_address)
async def add_address(message: Message, state: FSMContext):
    address = message.text
    try:
        r = requests.post(f"{API_BASE}/admin/add_location", data={"address": address})
        if r.status_code == 200:
            await message.answer("‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@dp.message(CreateState.choosing_address)
async def choose_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(CreateState.entering_room_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:", reply_markup=ReplyKeyboardRemove())

@dp.message(CreateState.entering_room_name)
async def enter_room_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CreateState.entering_group_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram Group ID:")

@dp.message(CreateState.entering_group_id)
async def enter_group_id(message: Message, state: FSMContext):
    await state.update_data(tg_group_id=message.text)
    data = await state.get_data()
    try:
        r = requests.post(f"{API_BASE}/admin/create_room", data={
            "address": data["address"],
            "name": data["name"],
            "tg_group_id": int(data["tg_group_id"])
        })
        result = r.json()
        await message.answer(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\nüè¢ –ê–¥—Ä–µ—Å: {data['address']}\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\nüîó QR: {result['qr_link']}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

@dp.message(Command("rooms"))
async def cmd_rooms(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        r = requests.get(f"{API_BASE}/admin/locations")
        addresses = r.json()
        if not addresses:
            return await message.answer("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
        buttons = [[KeyboardButton(text=addr)] for addr in addresses]
        markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await state.set_state(RoomQueryState.choosing_location)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=markup)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(RoomQueryState.choosing_location)
async def show_rooms(message: Message, state: FSMContext):
    address = message.text
    try:
        r = requests.get(f"{API_BASE}/admin/rooms/by_location", params={"address": address})
        rooms = r.json()
        if not rooms:
            await message.answer("–ü–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç.", reply_markup=ReplyKeyboardRemove())
        else:
            text = f"üè¢ {address}\n"
            for room in rooms:
                text += f"‚Ä¢ {room['name']} ‚Äî token: `{room['qr_token']}`\n"
            await message.answer(text, parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@dp.message(Command("qr"))
async def cmd_qr(message: Message):
    if not await is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) != 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /qr <token>")
    token = args[1]

    try:
        r = requests.get(f"{API_BASE}/room/{token}")
        if r.status_code == 404:
            return await message.answer("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        room = r.json()
        link = f"{FORM_URL}/feedback/{token}"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR
        qr = qrcode.make(link)
        buf = BytesIO()
        qr.save(buf, format="PNG")
        buf.seek(0)

        photo = BufferedInputFile(buf.getvalue(), filename="qr.png")

        caption = (
            f"üè† <b>{room['name']}</b>\n"
            f"üìç {room['address']}\n"
            f"üîó <a href=\"{link}\">–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É</a>"
        )

        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=caption,
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
